expect_equal(tmp$id, c(1100863, 1100920))
tmp <- filter(ff_df, !files_orig %in% tmp$files_orig)
err_files <- list.files(files$paths$error, pattern = as.character(tmp$id[1]))
expect_equal(length(err_files), 2)
})
test_that("test check_existing", {
expect_error(check_existing(ff_df, files$logs, quietly = TRUE),
"")
stat <- readr::read_tsv(files$logs$status, col_types = cols())
stat <- stat[-1, ]
readr::write_tsv(stat, files$logs$status, na="")
tmp <- expect_output(check_existing(ff_df, files$logs, quietly = FALSE),
"new")
unlink(out_dir, recursive = TRUE)
files <- setup_tests(task, in_dir, out_dir)
ff_df <- list.files(in_dir,
pattern=paste0(task,".*txt"),
recursive = T,
full.names = T)
ff_df <- etxt_initiate(ff_df, task = task, in_dir = in_dir)
tmp <- expect_output(check_existing(ff_df, files$logs, quietly = FALSE),
"Found \\*\\*4")
expect_equal(class(tmp), c("tbl_df", "tbl", "data.frame"))
expect_equal(nrow(tmp), 4)
})
devtools::load_all(".")
# edat checks ----
test_that("test check_edat", {
in_file <- paste0(in_dir, ff_df$files_orig_path[1])
in_file <- list.files(path = gsub(paste0(ff_df$files_orig[1], "|\\.txt"), "", in_file),
pattern = paste0(ff_df$files_orig[1], ".edat"), full.names = T)
expect_output(check_edat(in_file, ff_df$files_orig[1], ff_df$files_date_time[1],
files$logs, quietly = FALSE),
"edat companion file found")
in_file <- paste0(in_dir, ff_df$files_orig_path[2])
in_file <- list.files(path = gsub(paste0(ff_df$files_orig[2], "|\\.txt"), "", in_file),
pattern = paste0(ff_df$files_orig[2], ".edat"), full.names = T)
expect_output(check_edat(in_file, ff_df$files_orig[2], ff_df$files_date_time[2],
files$logs, quietly = FALSE),
"found multiple")
in_file <- paste0(in_dir, ff_df$files_orig_path[3])
in_file <- list.files(path = gsub(paste0(ff_df$files_orig[3], "|\\.txt"), "", in_file),
pattern = paste0(ff_df$files_orig[3], ".edat"), full.names = T)
expect_output(check_edat(in_file, ff_df$files_orig[3], ff_df$files_date_time[3],
files$logs, quietly = FALSE),
"cannot find")
})
eprime_setup_files(ff_df, in_dir, task, files$logs, files$paths, quietly = TRUE)
files <- setup_tests(task, in_dir, out_dir)
ff_df <- eprime_find(in_dir, task, files$paths, files$logs, quietly = TRUE)
eprime_setup_files(ff_df, in_dir, task, files$logs, files$paths, quietly = TRUE)
test_that("test check_session", {
expect_null(check_session("sub-1100883_ses-03_2019-01-01_12-00-00", 3))
expect_equal(check_session("sub-1100883_ses-03_2019-01-01_12-00-00", 4, logs = files$logs),
"sub-1100883_ses-04_2019-01-01_12-00-00")
})
test_that("test check_tilde_paths", {
expect_error(check_tilde_paths("~/User/athanasm"),
"tilde")
expect_null(check_tilde_paths("/User/athanasm"))
})
test_that("test check_nlines", {
expect_output(check_nlines(ff_df, task, files$logs, files$paths, quietly = FALSE),
"too few lines")
expect_silent(check_nlines(ff_df, task, files$logs, files$paths, quietly = TRUE))
tmp <- check_nlines(ff_df, task, files$logs, files$paths, quietly = TRUE)
expect_equal(nrow(tmp), 3)
})
test_that("test check_duplicates", {
expect_output(check_duplicates(ff_df, task, files$logs,
files$paths, quietly = FALSE),
"Found duplicates")
expect_silent(check_duplicates(ff_df, task, files$logs,
files$paths, quietly = TRUE))
tmp <- check_duplicates(ff_df, task, files$logs,
files$paths, quietly = TRUE)
expect_equal(nrow(tmp), 2)
expect_equal(tmp$id, c(1100863, 1100920))
tmp <- filter(ff_df, !files_orig %in% tmp$files_orig)
err_files <- list.files(files$paths$error, pattern = as.character(tmp$id[1]))
expect_equal(length(err_files), 2)
})
test_that("test check_existing", {
expect_error(check_existing(ff_df, files$logs, quietly = TRUE),
"")
stat <- readr::read_tsv(files$logs$status, col_types = cols())
stat <- stat[-1, ]
readr::write_tsv(stat, files$logs$status, na="")
tmp <- expect_output(check_existing(ff_df, files$logs, quietly = FALSE),
"new")
unlink(out_dir, recursive = TRUE)
files <- setup_tests(task, in_dir, out_dir)
ff_df <- list.files(in_dir,
pattern=paste0(task,".*txt"),
recursive = T,
full.names = T)
ff_df <- etxt_initiate(ff_df, task = task, in_dir = in_dir)
tmp <- expect_output(check_existing(ff_df, files$logs, quietly = FALSE),
"Found \\*\\*4")
expect_equal(class(tmp), c("tbl_df", "tbl", "data.frame"))
expect_equal(nrow(tmp), 4)
})
# edat checks ----
test_that("test check_edat", {
in_file <- paste0(in_dir, ff_df$files_orig_path[1])
in_file <- list.files(path = gsub(paste0(ff_df$files_orig[1], "|\\.txt"), "", in_file),
pattern = paste0(ff_df$files_orig[1], ".edat"), full.names = T)
expect_output(check_edat(in_file, ff_df$files_orig[1], ff_df$files_date_time[1],
files$logs, quietly = FALSE),
"edat companion file found")
in_file <- paste0(in_dir, ff_df$files_orig_path[2])
in_file <- list.files(path = gsub(paste0(ff_df$files_orig[2], "|\\.txt"), "", in_file),
pattern = paste0(ff_df$files_orig[2], ".edat"), full.names = T)
expect_output(check_edat(in_file, ff_df$files_orig[2], ff_df$files_date_time[2],
files$logs, quietly = FALSE),
"found multiple")
in_file <- paste0(in_dir, ff_df$files_orig_path[3])
in_file <- list.files(path = gsub(paste0(ff_df$files_orig[3], "|\\.txt"), "", in_file),
pattern = paste0(ff_df$files_orig[3], ".edat"), full.names = T)
expect_output(check_edat(in_file, ff_df$files_orig[3], ff_df$files_date_time[3],
files$logs, quietly = FALSE),
"cannot find")
})
test_that("test check_MOAS_subj", {
tmp <- check_MOAS_subj(MOAS = files$MOAS, subject = 1100913)
expect_equal(tmp$CrossProject_ID, 1100913)
expect_equal(tmp$Subject_Timepoint, 1)
expect_equal(nrow(tmp), 1)
expect_equal(ncol(tmp), 9)
tmp <- check_MOAS_subj(MOAS = files$MOAS, subject = 910)
expect_equal(nrow(tmp), 0)
expect_equal(ncol(tmp), 9)
})
test_that("test check_MOAS_date", {
tmp <- check_MOAS_date(MOAS = files$MOAS, date = "2017-07-14")
expect_equal(tmp$CrossProject_ID, 1100863)
expect_equal(tmp$Subject_Timepoint, 1)
expect_equal(nrow(tmp), 1)
expect_equal(ncol(tmp), 9)
tmp <- check_MOAS_date(MOAS = files$MOAS, date = "2018-07-14")
expect_equal(nrow(tmp), 0)
expect_equal(ncol(tmp), 9)
})
files$MOAS
check_manual_moas(.choice, files$MOAS )
check_manual_moas(NULL, files$MOAS )
devtools::load_all(".")
ff_df
check_manual_moas(NULL, files$MOAS, "Antisaccade-1100863-3" )
check_manual_moas(1, files$MOAS, "Antisaccade-1100863-3" )
devtools::load_all(".")
check_manual_moas(1, files$MOAS, "Antisaccade-1100863-3")
check_manual_moas(1, opts = files$MOAS, efile_orig = "Antisaccade-1100863-3")
check_manual_moas(NULL, opts = files$MOAS, efile_orig = "Antisaccade-1100863-3")
tmp_moas <- files$MOAS %>%
dplyr::mutate(selection = paste(CrossProject_ID, Test_Date, sep=": "))
check_manual_moas(NULL, opts = tmp_moas, efile_orig = "Antisaccade-1100863-3")
check_manual_moas(1, opts = tmp_moas, efile_orig = "Antisaccade-1100863-3")
devtools::load_all(".")
check_manual_moas(1, opts = tmp_moas, efile_orig = "Antisaccade-1100863-3")
new_info <- check_manual_moas(1, opts = tmp_moas, efile_orig = "Antisaccade-1100863-3")
expect_true(is.list(new_info))
expect_equals(names(new_info), c("new_id", "new_ses"))
expect_equal(names(new_info), c("new_id", "new_ses"))
expect_equal(length(new_info$new_id), 1)
expect_equal(length(new_info$new_ses), 1)
new_info <- check_manual_moas(0, opts = tmp_moas, efile_orig = "Antisaccade-1100863-3")
new_info
new_info <- check_manual_moas(3, opts = tmp_moas, efile_orig = "Antisaccade-1100863-3")
new_info
devtools::load_all(".")
new_info <- check_manual_moas(3, opts = tmp_moas, efile_orig = "Antisaccade-1100863-3")
new_info
devtools::load_all(".")
new_info <- check_manual_moas(3, opts = tmp_moas, efile_orig = "Antisaccade-1100863-3")
new_info
new_info <- check_manual_moas(0, opts = tmp_moas, efile_orig = "Antisaccade-1100863-3")
new_info
devtools::load_all(".")
new_info <- check_manual_moas(0, opts = tmp_moas, efile_orig = "Antisaccade-1100863-3")
check_manual_moas(0, opts = tmp_moas, efile_orig = "Antisaccade-1100863-3")
check_manual_moas(1, opts = tmp_moas, efile_orig = "Antisaccade-1100863-3")
new_info <- check_manual_moas(3, opts = tmp_moas, efile_orig = "Antisaccade-1100863-3")
new_info
expect_true(is.null(new_info))
new_info <- check_manual_moas(0, opts = tmp_moas, efile_orig = "Antisaccade-1100863-3")
expect_true(is.null(new_info))
devtools::load_all(".")
new_info <- check_manual_moas(1, opts = tmp_moas, efile_orig = "Antisaccade-1100863-3", quietly = TRUE)
new_info <- check_manual_moas(1, opts = tmp_moas,
efile_orig = "Antisaccade-1100863-3", quietly = TRUE)
expect_true(is.list(new_info))
expect_equal(names(new_info), c("new_id", "new_ses"))
expect_equal(length(new_info$new_id), 1)
expect_equal(length(new_info$new_ses), 1)
new_info <- check_manual_moas(3, opts = tmp_moas,
efile_orig = "Antisaccade-1100863-3", quietly = TRUE)
expect_true(is.null(new_info))
new_info <- check_manual_moas(0, opts = tmp_moas,
efile_orig = "Antisaccade-1100863-3", quietly = TRUE)
expect_true(is.null(new_info))
devtools::load_all(".")
eprime_parser()
fix_ids(1)
fix_ids(1100973)
in_dir = "/Users/athanasm/LCBC/Projects/Cross_projects/computer_tasks"
out_dir = "/Users/athanasm/Desktop/tasks"
task = "n-back"
MOAS = "/Users/athanasm/LCBC/Projects/Cross_projects/MOAS/Data/MOAS.RData"
k <- sapply(c(in_dir, out_dir),
check_tilde_paths)
devtools::load_all(".")
k <- sapply(c(in_dir, out_dir),
check_tilde_paths)
# Initiate processing----
MOAS <- get_moas(MOAS)
# Set up logs, and get their paths
logs <- eprime_setup_logs(out_dir, task, quietly = quietly)
# Set up directories, and get their paths
paths <- eprime_setup_paths(out_dir, task, logs, quietly = quietly)
# Search for files and do initial checks
to_process <- eprime_find(in_dir = in_dir,
task = task,
paths = paths,
logs = logs,
quietly = quietly)
quietly = FALSE
# Set up logs, and get their paths
logs <- eprime_setup_logs(out_dir, task, quietly = quietly)
# Set up directories, and get their paths
paths <- eprime_setup_paths(out_dir, task, logs, quietly = quietly)
# Search for files and do initial checks
to_process <- eprime_find(in_dir = in_dir,
task = task,
paths = paths,
logs = logs,
quietly = quietly)
log_it(paste("Searching for", task, "files in", in_dir, "."),
type = "message", logs = list(logs$session), quietly = quietly)
# Files ----
# Find all txt files in in_dir for this task
ff <- list.files(in_dir,
pattern=paste0(task,".*txt"),
recursive = T,
full.names = T)
if(length(ff) == 0){
msg <- paste0("No files found for task '", task, "'. Please check if this is a task with data.")
log_it(msg, type = "error", logs = logs$session, quietly)
stop_quietly()
}
# Initiate the txt files, and remove _known_ untrue files
# And duplicates from copying files around
ff_df <-  etxt_initiate(ff, task = task, in_dir = in_dir) %>%
filter(!grepl("Copy", files_orig),
!grepl("/old/", files_orig_path),
id != 9999999,
!duplicated(files_date_time))
ff_df <- ro_process
ff_df <- to_process
# cleanup file names, make output path
ff_names <- gsub("\\.txt", "", basename(ff))
ff_new <- ff_names %>%
gsub(paste0(task, "-"), "", .) %>%
gsub("-", "_", .) %>%
paste(., task,sep="_")
# Add BIDS type naming, for compatibility with other data
ff_new <- strsplit(ff_new, "_")
ff_new <- lapply(ff_new,  function(x){
x[1] <- paste0("sub-", x[1])
x[2] <- paste0("ses-", leading_zero(x[2], 2))
paste0(x, collapse = "_")
}) %>%
unlist() %>%
unname()
# Find IDs ----
ids <- lapply(gsub(task, "", ff_names), function(x) strsplit(x, "-")[[1]][2])
ids <- as.numeric(unlist(ids))
# cleanup file names, make output path
ff_names <- gsub("\\.txt", "", basename(ff))
ff_new <- ff_names %>%
gsub(paste0(task, "-"), "", .) %>%
gsub("-", "_", .) %>%
paste(., task,sep="_")
# Add BIDS type naming, for compatibility with other data
ff_new <- strsplit(ff_new, "_")
ff_new <- lapply(ff_new,  function(x){
x[1] <- paste0("sub-", x[1])
x[2] <- paste0("ses-", leading_zero(x[2], 2))
paste0(x, collapse = "_")
}) %>%
unlist() %>%
unname()
# cleanup file names, make output path
ff_names <- gsub("\\.txt", "", basename(ff))
ff_new <- ff_names %>%
gsub(paste0(task, "-"), "", .) %>%
gsub("-", "_", .) %>%
paste(., task,sep="_")
# Add BIDS type naming, for compatibility with other data
ff_new <- strsplit(ff_new, "_")
ff_new <- suppressWarnings(
lapply(ff_new,  function(x){
x[1] <- paste0("sub-", x[1])
x[2] <- paste0("ses-", leading_zero(x[2], 2))
paste0(x, collapse = "_")
}) %>%
unlist() %>%
unname()
)
# Find IDs ----
ids <- lapply(gsub(task, "", ff_names), function(x) strsplit(x, "-")[[1]][2])
ids <- suppressWarnings(as.numeric(unlist(ids)))
files_orig_path = gsub(in_dir, "", ff_df)
# Fix them
for(i in 1:length(ids)){
print(i)
tmp <- paste0("sub-", ids[i])
ids[i] <- fix_ids(ids[i], files_orig_path[i])
ff_new[i] <- gsub(tmp, paste0("sub-", ids[i]), ff_new[i])
}
files_orig_path = gsub(in_dir, "", ff)
# Fix them
for(i in 1:length(ids)){
print(i)
tmp <- paste0("sub-", ids[i])
ids[i] <- fix_ids(ids[i], files_orig_path[i])
ff_new[i] <- gsub(tmp, paste0("sub-", ids[i]), ff_new[i])
}
tmp
ids
# Find IDs ----
ids <- lapply(gsub(task, "", ff_names), function(x) strsplit(x, "-")[[1]][2])
ids
ids %>% unlist
ff_names
# Find IDs ----
ids <- sapply(gsub(task, "", ff_names), function(x) strsplit(x, "-")[[1]][2])
ids
ff_na,es
ff_names
ids <- gsub("Copy", "", ids)
ids
# Find IDs ----
ids <- sapply(gsub(task, "", ff_names), function(x) strsplit(x, "-")[[1]][2])
ids <- gsub("Copy", "", ids)
# Find IDs ----
ids <- sapply(gsub(task, "", ff_names), function(x) strsplit(x, "-")[[1]][2])
# Find IDs ----
ids <- sapply(gsub(task, "", ff_names), function(x) strsplit(x, "-")[[1]][2])
ids <- gsub("Copy", "", ids)
ids
# Find IDs ----
ids <- sapply(gsub(task, "", ff_names), function(x) strsplit(x, "-")[[1]][2])
ids
gsub("Copy", "", unname(ids))
# Find IDs ----
ids <- sapply(gsub(task, "", ff_names), function(x) strsplit(x, "-")[[1]][2])
# Find IDs ----
ids <- sapply(gsub(task, "", ff_names), function(x) strsplit(x, "-")[[1]][2])
ids <- gsub("Copy", "", unname(ids))
ids
# Find IDs ----
ids <- sapply(gsub(task, "", ff_names), function(x) strsplit(x, "-")[[1]][2])
ids
ff_names
# Find IDs ----
ff_nms <- gsub("Copy", "", ff_names)
ids <- sapply(gsub(task, "", ff_nms), function(x) strsplit(x, "-")[[1]][2])
ids
# Find IDs ----
ff_nms <- gsub("Copy|[[:space:]]", "", ff_names)
ids <- sapply(gsub(task, "", ff_nms), function(x) strsplit(x, "-")[[1]][2])
ids
ff_nms <- gsub("--", "-", ff_nms)
# Find IDs ----
ff_nms <- gsub("Copy|[[:space:]]", "", ff_names)
ff_nms <- gsub("--", "-", ff_nms)
ff_nms
ids <- sapply(gsub(task, "", ff_nms), function(x) strsplit(x, "-")[[1]][2])
ids <- suppressWarnings(as.numeric(ids))
ids
files_orig_path = gsub(in_dir, "", ff)
# Fix them
for(i in 1:length(ids)){
print(i)
tmp <- paste0("sub-", ids[i])
ids[i] <- fix_ids(ids[i], files_orig_path[i])
ff_new[i] <- gsub(tmp, paste0("sub-", ids[i]), ff_new[i])
}
devtools::load_all(".")
eprime_parser()
task <- "Antisaccade"
out_dir <- "test_folder"
in_dir <- "tests/testthat/test_files/"
setup_tests <- function(task, in_dir, out_dir){
unlink(out_dir, recursive = TRUE)
MOAS <- readr::read_tsv(paste0(in_dir, "moas.tsv"))
logs <- eprime_setup_logs(out_dir, task, quietly = TRUE)
paths <- eprime_setup_paths(out_dir, task, logs, quietly = TRUE)
list(MOAS = MOAS, paths = paths, logs = logs)
}
files <- setup_tests(task, in_dir, out_dir)
ff_df <- eprime_find(in_dir, task, files$paths, files$logs, quietly = TRUE)
# cleanup file names, make output path
ff_names <- gsub("\\.txt", "", basename(ff))
ff_new <- ff_names %>%
gsub(paste0(task, "-"), "", .) %>%
gsub("-", "_", .) %>%
paste(., task,sep="_")
# Add BIDS type naming, for compatibility with other data
ff_new <- strsplit(ff_new, "_")
ff_new <- suppressWarnings(
lapply(ff_new,  function(x){
x[1] <- paste0("sub-", x[1])
x[2] <- paste0("ses-", leading_zero(x[2], 2))
paste0(x, collapse = "_")
}) %>%
unlist() %>%
unname()
)
# Find IDs ----
ff_nms <- gsub("Copy|[[:space:]]", "", ff_names)
ff_nms <- gsub("--", "-", ff_nms)
ids <- sapply(gsub(task, "", ff_nms), function(x) strsplit(x, "-")[[1]][2])
ids <- suppressWarnings(as.numeric(ids))
files_orig_path = gsub(in_dir, "", ff)
# Fix them
for(i in 1:length(ids)){
#print(ids[i])
tmp <- paste0("sub-", ids[i])
ids[i] <- fix_ids(ids[i], files_orig_path[i])
ff_new[i] <- gsub(tmp, paste0("sub-", ids[i]), ff_new[i])
}
ids
ff
# cleanup file names, make output path
ff_names <- gsub("\\.txt", "", basename(ff))
ff_new <- ff_names %>%
gsub(paste0(task, "-"), "", .) %>%
gsub("-", "_", .) %>%
paste(., task,sep="_")
# Add BIDS type naming, for compatibility with other data
ff_new <- strsplit(ff_new, "_")
ff_new <- suppressWarnings(
lapply(ff_new,  function(x){
x[1] <- paste0("sub-", x[1])
x[2] <- paste0("ses-", leading_zero(x[2], 2))
paste0(x, collapse = "_")
}) %>%
unlist() %>%
unname()
)
# Find IDs ----
ff_nms <- gsub("Copy|[[:space:]]", "", ff_names)
ff_nms <- gsub("--", "-", ff_nms)
ff_nms
ids <- sapply(gsub(task, "", ff_nms), function(x) strsplit(x, "-")[[1]][2])
ids
# Find IDs ----
ff_nms <- gsub("Copy|[[:space:]]", "", ff_names)
ff_nms <- gsub("--", "-", ff_nms)
gsub(task, "", ff_nms)
task
task <- "n-back"
ids <- sapply(gsub(task, "", ff_nms), function(x) strsplit(x, "-")[[1]][2])
ids
ids <- suppressWarnings(as.numeric(ids))
files_orig_path = gsub(in_dir, "", ff)
# Fix them
for(i in 1:length(ids)){
#print(ids[i])
tmp <- paste0("sub-", ids[i])
ids[i] <- fix_ids(ids[i], files_orig_path[i])
ff_new[i] <- gsub(tmp, paste0("sub-", ids[i]), ff_new[i])
}
# Read in the files
dat <- suppressWarnings(
sapply(ff, etxt_readLines)
)
# Count number of lines
nlines <- unlist(unname(lapply(dat, length)))
# Find date and time of test
datetime <- lapply(dat, function(x){
z <- x[1:35]
z <- z[grep("SessionDate|SessionTime", z)+1]
data.frame(Date = z[1],
Time = z[2],
stringsAsFactors = F)
})
datetime <- dplyr::bind_rows(datetime)
# Make data.frame to work with
ff_df <- dplyr::tibble(
id = ids,
date = as.character(as.Date(datetime$Date, format = "%m-%d-%Y")),
time = datetime$Time,
nlines = nlines,
status = "",
comment = "",
processed_date = Sys.Date(),
files_date_time = ff_new,
files_orig = gsub("\\.txt", "", ff_names),
)
dplyr::mutate(ff_df,
files_date_time = paste(files_date_time, date, gsub(":","-",time), sep="_"),
files_orig_path = files_orig_path
)
?eprime_parser
roxygen2::roxygenise()
eprime_parse(task="n-back")
devtools::load_all(".")
eprime_parse(task="n-back")
beepr::beep()
